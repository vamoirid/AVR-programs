
18.UART_Tutorial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000074a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000074a  000007de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006a  0080006a  000007e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ba  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066f  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044d  00000000  00000000  000017d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b4  00000000  00000000  0000211d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000023d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  8a:	0c 94 a3 03 	jmp	0x746	; 0x746 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ButtonInit>:
		i++;
	}
	//str[i] = '\0';

	return str;
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	c8 2f       	mov	r28, r24
  98:	d0 e0       	ldi	r29, 0x00	; 0
  9a:	ce 01       	movw	r24, r28
  9c:	0e 94 82 02 	call	0x504	; 0x504 <malloc>
  a0:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <pressed+0x1>
  a4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <pressed>
  a8:	ce 01       	movw	r24, r28
  aa:	0e 94 82 02 	call	0x504	; 0x504 <malloc>
  ae:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <PressedConfidenceLevel+0x1>
  b2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <PressedConfidenceLevel>
  b6:	ce 01       	movw	r24, r28
  b8:	0e 94 82 02 	call	0x504	; 0x504 <malloc>
  bc:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <ReleasedConfidenceLevel+0x1>
  c0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <ReleasedConfidenceLevel>
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <isButtonPressed>:
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	1f 92       	push	r1
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	89 83       	std	Y+1, r24	; 0x01
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <isButtonPressed+0x16>
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <isButtonPressed+0x12>
  e4:	80 fd       	sbrc	r24, 0
  e6:	31 c0       	rjmp	.+98     	; 0x14a <isButtonPressed+0x80>
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	b9 01       	movw	r22, r18
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <PressedConfidenceLevel>
  f4:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <PressedConfidenceLevel+0x1>
  f8:	e6 0f       	add	r30, r22
  fa:	f7 1f       	adc	r31, r23
  fc:	80 81       	ld	r24, Z
  fe:	91 81       	ldd	r25, Z+1	; 0x01
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	91 83       	std	Z+1, r25	; 0x01
 104:	80 83       	st	Z, r24
 106:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <PressedConfidenceLevel>
 10a:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <PressedConfidenceLevel+0x1>
 10e:	e6 0f       	add	r30, r22
 110:	f7 1f       	adc	r31, r23
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	48 17       	cp	r20, r24
 118:	59 07       	cpc	r21, r25
 11a:	e8 f5       	brcc	.+122    	; 0x196 <isButtonPressed+0xcc>
 11c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <pressed>
 120:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <pressed+0x1>
 124:	fc 01       	movw	r30, r24
 126:	e2 0f       	add	r30, r18
 128:	f3 1f       	adc	r31, r19
 12a:	80 81       	ld	r24, Z
 12c:	81 11       	cpse	r24, r1
 12e:	35 c0       	rjmp	.+106    	; 0x19a <isButtonPressed+0xd0>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 83       	st	Z, r24
 134:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <PressedConfidenceLevel>
 138:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <PressedConfidenceLevel+0x1>
 13c:	fc 01       	movw	r30, r24
 13e:	e6 0f       	add	r30, r22
 140:	f7 1f       	adc	r31, r23
 142:	11 82       	std	Z+1, r1	; 0x01
 144:	10 82       	st	Z, r1
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	2b c0       	rjmp	.+86     	; 0x1a0 <isButtonPressed+0xd6>
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	c9 01       	movw	r24, r18
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <ReleasedConfidenceLevel>
 156:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <ReleasedConfidenceLevel+0x1>
 15a:	e8 0f       	add	r30, r24
 15c:	f9 1f       	adc	r31, r25
 15e:	60 81       	ld	r22, Z
 160:	71 81       	ldd	r23, Z+1	; 0x01
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	71 83       	std	Z+1, r23	; 0x01
 168:	60 83       	st	Z, r22
 16a:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <ReleasedConfidenceLevel>
 16e:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <ReleasedConfidenceLevel+0x1>
 172:	fb 01       	movw	r30, r22
 174:	e8 0f       	add	r30, r24
 176:	f9 1f       	adc	r31, r25
 178:	80 81       	ld	r24, Z
 17a:	91 81       	ldd	r25, Z+1	; 0x01
 17c:	48 17       	cp	r20, r24
 17e:	59 07       	cpc	r21, r25
 180:	70 f4       	brcc	.+28     	; 0x19e <isButtonPressed+0xd4>
 182:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <pressed>
 186:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <pressed+0x1>
 18a:	fc 01       	movw	r30, r24
 18c:	e2 0f       	add	r30, r18
 18e:	f3 1f       	adc	r31, r19
 190:	10 82       	st	Z, r1
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <isButtonPressed+0xd6>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <isButtonPressed+0xd6>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <isButtonPressed+0xd6>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0f 90       	pop	r0
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <UART_Transmit>:
 1a8:	5d 9b       	sbis	0x0b, 5	; 11
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <UART_Transmit>
 1ac:	8c b9       	out	0x0c, r24	; 12
 1ae:	08 95       	ret

000001b0 <UART_Send_String>:
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	8c 01       	movw	r16, r24
 1ba:	ec 01       	movw	r28, r24
 1bc:	09 90       	ld	r0, Y+
 1be:	00 20       	and	r0, r0
 1c0:	e9 f7       	brne	.-6      	; 0x1bc <UART_Send_String+0xc>
 1c2:	21 97       	sbiw	r28, 0x01	; 1
 1c4:	c8 1b       	sub	r28, r24
 1c6:	d9 0b       	sbc	r29, r25
 1c8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <i+0x1>
 1cc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <i>
 1d0:	20 97       	sbiw	r28, 0x00	; 0
 1d2:	a1 f0       	breq	.+40     	; 0x1fc <UART_Send_String+0x4c>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	f8 01       	movw	r30, r16
 1da:	e8 0f       	add	r30, r24
 1dc:	f9 1f       	adc	r31, r25
 1de:	80 81       	ld	r24, Z
 1e0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <UART_Transmit>
 1e4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <i>
 1e8:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <i+0x1>
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <i+0x1>
 1f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <i>
 1f6:	8c 17       	cp	r24, r28
 1f8:	9d 07       	cpc	r25, r29
 1fa:	70 f3       	brcs	.-36     	; 0x1d8 <UART_Send_String+0x28>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <UART_Transmit>
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	08 95       	ret

0000020c <UART_Init>:

void UART_Init(int baud, char doubleSpeed, char dataBits, char parityBit, char stopBits)
{
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	16 2f       	mov	r17, r22
 216:	c4 2f       	mov	r28, r20
 218:	d2 2f       	mov	r29, r18
	uint16_t UBRRValue = lrint((F_CPU / (16L * baud)) - 1);
 21a:	09 2e       	mov	r0, r25
 21c:	00 0c       	add	r0, r0
 21e:	aa 0b       	sbc	r26, r26
 220:	bb 0b       	sbc	r27, r27
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	aa 1f       	adc	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	aa 1f       	adc	r26, r26
 230:	bb 1f       	adc	r27, r27
 232:	9c 01       	movw	r18, r24
 234:	ad 01       	movw	r20, r26
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	44 1f       	adc	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	22 0f       	add	r18, r18
 240:	33 1f       	adc	r19, r19
 242:	44 1f       	adc	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	60 e4       	ldi	r22, 0x40	; 64
 248:	72 e4       	ldi	r23, 0x42	; 66
 24a:	8f e0       	ldi	r24, 0x0F	; 15
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 41 02 	call	0x482	; 0x482 <__divmodsi4>
 252:	ca 01       	movw	r24, r20
 254:	b9 01       	movw	r22, r18
 256:	61 50       	subi	r22, 0x01	; 1
 258:	71 09       	sbc	r23, r1
 25a:	81 09       	sbc	r24, r1
 25c:	91 09       	sbc	r25, r1
 25e:	0e 94 a0 01 	call	0x340	; 0x340 <__floatsisf>
 262:	0e 94 db 01 	call	0x3b6	; 0x3b6 <lrint>

	if (doubleSpeed == 1) UCSRA = (1 << U2X);	//set the U2X bit for double speed
 266:	11 30       	cpi	r17, 0x01	; 1
 268:	11 f4       	brne	.+4      	; 0x26e <UART_Init+0x62>
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	8b b9       	out	0x0b, r24	; 11

	UBRRH = (unsigned char) (UBRRValue >> 8);
 26e:	70 bd       	out	0x20, r23	; 32
	UBRRL = (unsigned char) UBRRValue;
 270:	69 b9       	out	0x09, r22	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN);			//Enable Receiver and Transmitter
 272:	88 e1       	ldi	r24, 0x18	; 24
 274:	8a b9       	out	0x0a, r24	; 10

	UCSRC |= (1 << USBS);						//Set one Stop bit
 276:	80 b5       	in	r24, 0x20	; 32
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	80 bd       	out	0x20, r24	; 32

	if (dataBits == 5) UCSRC &= ~((1 << UCSZ0) | (1 << UCSZ1) | (1 << UCSZ2));
 27c:	c5 30       	cpi	r28, 0x05	; 5
 27e:	21 f4       	brne	.+8      	; 0x288 <UART_Init+0x7c>
 280:	80 b5       	in	r24, 0x20	; 32
 282:	89 7f       	andi	r24, 0xF9	; 249
 284:	80 bd       	out	0x20, r24	; 32
 286:	0c c0       	rjmp	.+24     	; 0x2a0 <UART_Init+0x94>
	if (dataBits == 6) UCSRC |= (1 << UCSZ0);
 288:	c6 30       	cpi	r28, 0x06	; 6
 28a:	21 f4       	brne	.+8      	; 0x294 <UART_Init+0x88>
 28c:	80 b5       	in	r24, 0x20	; 32
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	80 bd       	out	0x20, r24	; 32
 292:	0c c0       	rjmp	.+24     	; 0x2ac <UART_Init+0xa0>
	if (dataBits == 7) UCSRC |= (1 << UCSZ1);
 294:	c7 30       	cpi	r28, 0x07	; 7
 296:	21 f4       	brne	.+8      	; 0x2a0 <UART_Init+0x94>
 298:	80 b5       	in	r24, 0x20	; 32
 29a:	84 60       	ori	r24, 0x04	; 4
 29c:	80 bd       	out	0x20, r24	; 32
 29e:	0b c0       	rjmp	.+22     	; 0x2b6 <UART_Init+0xaa>
	if (dataBits == 8) UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
 2a0:	c8 30       	cpi	r28, 0x08	; 8
 2a2:	21 f4       	brne	.+8      	; 0x2ac <UART_Init+0xa0>
 2a4:	80 b5       	in	r24, 0x20	; 32
 2a6:	86 60       	ori	r24, 0x06	; 6
 2a8:	80 bd       	out	0x20, r24	; 32
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <UART_Init+0xaa>
	if (dataBits == 9) UCSRC |= (1 << UCSZ0) | (1 << UCSZ1) | (1 << UCSZ2);
 2ac:	c9 30       	cpi	r28, 0x09	; 9
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <UART_Init+0xaa>
 2b0:	80 b5       	in	r24, 0x20	; 32
 2b2:	86 60       	ori	r24, 0x06	; 6
 2b4:	80 bd       	out	0x20, r24	; 32

	if (parityBit == 'E') UCSRC |= (1 << UPM1);
 2b6:	d5 34       	cpi	r29, 0x45	; 69
 2b8:	21 f4       	brne	.+8      	; 0x2c2 <UART_Init+0xb6>
 2ba:	80 b5       	in	r24, 0x20	; 32
 2bc:	80 62       	ori	r24, 0x20	; 32
 2be:	80 bd       	out	0x20, r24	; 32
 2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <UART_Init+0xcc>
	if (parityBit == 'O') UCSRC |= (1 << UPM0) | (1 << UPM1);
 2c2:	df 34       	cpi	r29, 0x4F	; 79
 2c4:	21 f4       	brne	.+8      	; 0x2ce <UART_Init+0xc2>
 2c6:	80 b5       	in	r24, 0x20	; 32
 2c8:	80 63       	ori	r24, 0x30	; 48
 2ca:	80 bd       	out	0x20, r24	; 32
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <UART_Init+0xcc>
	if (parityBit == 'N') UCSRC &= ~((1 << UPM0) | (1 << UPM1));
 2ce:	de 34       	cpi	r29, 0x4E	; 78
 2d0:	19 f4       	brne	.+6      	; 0x2d8 <UART_Init+0xcc>
 2d2:	80 b5       	in	r24, 0x20	; 32
 2d4:	8f 7c       	andi	r24, 0xCF	; 207
 2d6:	80 bd       	out	0x20, r24	; 32

	if (stopBits == 1) UCSRC &= ~(1 << USBS);
 2d8:	01 30       	cpi	r16, 0x01	; 1
 2da:	21 f4       	brne	.+8      	; 0x2e4 <UART_Init+0xd8>
 2dc:	80 b5       	in	r24, 0x20	; 32
 2de:	87 7f       	andi	r24, 0xF7	; 247
 2e0:	80 bd       	out	0x20, r24	; 32
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <UART_Init+0xe2>
	if (stopBits == 2) UCSRC |= (1 << USBS);
 2e4:	02 30       	cpi	r16, 0x02	; 2
 2e6:	19 f4       	brne	.+6      	; 0x2ee <UART_Init+0xe2>
 2e8:	80 b5       	in	r24, 0x20	; 32
 2ea:	88 60       	ori	r24, 0x08	; 8
 2ec:	80 bd       	out	0x20, r24	; 32
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <main>:

int main(void)
{
	//Pin Configuration

	DDRB &= ~(1 << DDB0);                              //Set ButtonPin as input
 2f8:	b8 98       	cbi	0x17, 0	; 23
	DDRB |= (1 << DDB1);                               //Set LEDPin as output
 2fa:	b9 9a       	sbi	0x17, 1	; 23
	PORTB |= (1 << PORTB0);                            //Set ButtonPin HIGH
 2fc:	c0 9a       	sbi	0x18, 0	; 24
	PORTB &= ~(1 << PORTB1);                           //Set LEDPin LOW
 2fe:	c1 98       	cbi	0x18, 1	; 24

	 UART_Init(4800,0,8,N,1);
 300:	01 e0       	ldi	r16, 0x01	; 1
 302:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
 306:	48 e0       	ldi	r20, 0x08	; 8
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	80 ec       	ldi	r24, 0xC0	; 192
 30c:	92 e1       	ldi	r25, 0x12	; 18
 30e:	0e 94 06 01 	call	0x20c	; 0x20c <UART_Init>
	 //Button Configuration
	 ButtonInit(1);
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 49 00 	call	0x92	; 0x92 <ButtonInit>
    
    while (1) 
    {
		if (isButtonPressed(PINB, 0, 300, 1))                  
		{
			PORTB ^= (1 << PORTB1);            //Toggle Pin
 318:	c2 e0       	ldi	r28, 0x02	; 2
	 ButtonInit(1);
	         
    
    while (1) 
    {
		if (isButtonPressed(PINB, 0, 300, 1))                  
 31a:	86 b3       	in	r24, 0x16	; 22
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	4c e2       	ldi	r20, 0x2C	; 44
 320:	51 e0       	ldi	r21, 0x01	; 1
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	0e 94 65 00 	call	0xca	; 0xca <isButtonPressed>
 328:	88 23       	and	r24, r24
 32a:	b9 f3       	breq	.-18     	; 0x31a <main+0x22>
		{
			PORTB ^= (1 << PORTB1);            //Toggle Pin
 32c:	88 b3       	in	r24, 0x18	; 24
 32e:	8c 27       	eor	r24, r28
 330:	88 bb       	out	0x18, r24	; 24
			//UART_Transmit('c');
			UART_Send_String("ab");
 332:	86 e6       	ldi	r24, 0x66	; 102
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_Send_String>
 33a:	ef cf       	rjmp	.-34     	; 0x31a <main+0x22>

0000033c <__floatunsisf>:
 33c:	e8 94       	clt
 33e:	09 c0       	rjmp	.+18     	; 0x352 <__floatsisf+0x12>

00000340 <__floatsisf>:
 340:	97 fb       	bst	r25, 7
 342:	3e f4       	brtc	.+14     	; 0x352 <__floatsisf+0x12>
 344:	90 95       	com	r25
 346:	80 95       	com	r24
 348:	70 95       	com	r23
 34a:	61 95       	neg	r22
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	8f 4f       	sbci	r24, 0xFF	; 255
 350:	9f 4f       	sbci	r25, 0xFF	; 255
 352:	99 23       	and	r25, r25
 354:	a9 f0       	breq	.+42     	; 0x380 <__floatsisf+0x40>
 356:	f9 2f       	mov	r31, r25
 358:	96 e9       	ldi	r25, 0x96	; 150
 35a:	bb 27       	eor	r27, r27
 35c:	93 95       	inc	r25
 35e:	f6 95       	lsr	r31
 360:	87 95       	ror	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b7 95       	ror	r27
 368:	f1 11       	cpse	r31, r1
 36a:	f8 cf       	rjmp	.-16     	; 0x35c <__floatsisf+0x1c>
 36c:	fa f4       	brpl	.+62     	; 0x3ac <__floatsisf+0x6c>
 36e:	bb 0f       	add	r27, r27
 370:	11 f4       	brne	.+4      	; 0x376 <__floatsisf+0x36>
 372:	60 ff       	sbrs	r22, 0
 374:	1b c0       	rjmp	.+54     	; 0x3ac <__floatsisf+0x6c>
 376:	6f 5f       	subi	r22, 0xFF	; 255
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	8f 4f       	sbci	r24, 0xFF	; 255
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	16 c0       	rjmp	.+44     	; 0x3ac <__floatsisf+0x6c>
 380:	88 23       	and	r24, r24
 382:	11 f0       	breq	.+4      	; 0x388 <__floatsisf+0x48>
 384:	96 e9       	ldi	r25, 0x96	; 150
 386:	11 c0       	rjmp	.+34     	; 0x3aa <__floatsisf+0x6a>
 388:	77 23       	and	r23, r23
 38a:	21 f0       	breq	.+8      	; 0x394 <__floatsisf+0x54>
 38c:	9e e8       	ldi	r25, 0x8E	; 142
 38e:	87 2f       	mov	r24, r23
 390:	76 2f       	mov	r23, r22
 392:	05 c0       	rjmp	.+10     	; 0x39e <__floatsisf+0x5e>
 394:	66 23       	and	r22, r22
 396:	71 f0       	breq	.+28     	; 0x3b4 <__floatsisf+0x74>
 398:	96 e8       	ldi	r25, 0x86	; 134
 39a:	86 2f       	mov	r24, r22
 39c:	70 e0       	ldi	r23, 0x00	; 0
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	2a f0       	brmi	.+10     	; 0x3ac <__floatsisf+0x6c>
 3a2:	9a 95       	dec	r25
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	88 1f       	adc	r24, r24
 3aa:	da f7       	brpl	.-10     	; 0x3a2 <__floatsisf+0x62>
 3ac:	88 0f       	add	r24, r24
 3ae:	96 95       	lsr	r25
 3b0:	87 95       	ror	r24
 3b2:	97 f9       	bld	r25, 7
 3b4:	08 95       	ret

000003b6 <lrint>:
 3b6:	0e 94 20 02 	call	0x440	; 0x440 <__fp_splitA>
 3ba:	a8 f1       	brcs	.+106    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3bc:	9e 57       	subi	r25, 0x7E	; 126
 3be:	b0 f1       	brcs	.+108    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 3c0:	98 51       	subi	r25, 0x18	; 24
 3c2:	60 f0       	brcs	.+24     	; 0x3dc <lrint+0x26>
 3c4:	39 f1       	breq	.+78     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3c6:	98 30       	cpi	r25, 0x08	; 8
 3c8:	70 f5       	brcc	.+92     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ca:	09 2e       	mov	r0, r25
 3cc:	99 27       	eor	r25, r25
 3ce:	66 0f       	add	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	88 1f       	adc	r24, r24
 3d4:	99 1f       	adc	r25, r25
 3d6:	0a 94       	dec	r0
 3d8:	d1 f7       	brne	.-12     	; 0x3ce <lrint+0x18>
 3da:	1c c0       	rjmp	.+56     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 3dc:	bb 27       	eor	r27, r27
 3de:	99 3f       	cpi	r25, 0xF9	; 249
 3e0:	4c f4       	brge	.+18     	; 0x3f4 <lrint+0x3e>
 3e2:	b1 11       	cpse	r27, r1
 3e4:	b1 e0       	ldi	r27, 0x01	; 1
 3e6:	b6 2b       	or	r27, r22
 3e8:	67 2f       	mov	r22, r23
 3ea:	78 2f       	mov	r23, r24
 3ec:	88 27       	eor	r24, r24
 3ee:	98 5f       	subi	r25, 0xF8	; 248
 3f0:	b1 f7       	brne	.-20     	; 0x3de <lrint+0x28>
 3f2:	08 c0       	rjmp	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f4:	86 95       	lsr	r24
 3f6:	77 95       	ror	r23
 3f8:	67 95       	ror	r22
 3fa:	b7 95       	ror	r27
 3fc:	08 f4       	brcc	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	b1 60       	ori	r27, 0x01	; 1
 400:	93 95       	inc	r25
 402:	c1 f7       	brne	.-16     	; 0x3f4 <lrint+0x3e>
 404:	bb 0f       	add	r27, r27
 406:	30 f4       	brcc	.+12     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 408:	11 f4       	brne	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	60 ff       	sbrs	r22, 0
 40c:	03 c0       	rjmp	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40e:	6f 5f       	subi	r22, 0xFF	; 255
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	8f 4f       	sbci	r24, 0xFF	; 255
 414:	3e f4       	brtc	.+14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 416:	90 95       	com	r25
 418:	80 95       	com	r24
 41a:	70 95       	com	r23
 41c:	61 95       	neg	r22
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	8f 4f       	sbci	r24, 0xFF	; 255
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	08 95       	ret
 426:	68 94       	set
 428:	0c 94 3b 02 	jmp	0x476	; 0x476 <__fp_szero>
 42c:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_zero>

00000430 <__fp_split3>:
 430:	57 fd       	sbrc	r21, 7
 432:	90 58       	subi	r25, 0x80	; 128
 434:	44 0f       	add	r20, r20
 436:	55 1f       	adc	r21, r21
 438:	59 f0       	breq	.+22     	; 0x450 <__fp_splitA+0x10>
 43a:	5f 3f       	cpi	r21, 0xFF	; 255
 43c:	71 f0       	breq	.+28     	; 0x45a <__fp_splitA+0x1a>
 43e:	47 95       	ror	r20

00000440 <__fp_splitA>:
 440:	88 0f       	add	r24, r24
 442:	97 fb       	bst	r25, 7
 444:	99 1f       	adc	r25, r25
 446:	61 f0       	breq	.+24     	; 0x460 <__fp_splitA+0x20>
 448:	9f 3f       	cpi	r25, 0xFF	; 255
 44a:	79 f0       	breq	.+30     	; 0x46a <__fp_splitA+0x2a>
 44c:	87 95       	ror	r24
 44e:	08 95       	ret
 450:	12 16       	cp	r1, r18
 452:	13 06       	cpc	r1, r19
 454:	14 06       	cpc	r1, r20
 456:	55 1f       	adc	r21, r21
 458:	f2 cf       	rjmp	.-28     	; 0x43e <__fp_split3+0xe>
 45a:	46 95       	lsr	r20
 45c:	f1 df       	rcall	.-30     	; 0x440 <__fp_splitA>
 45e:	08 c0       	rjmp	.+16     	; 0x470 <__fp_splitA+0x30>
 460:	16 16       	cp	r1, r22
 462:	17 06       	cpc	r1, r23
 464:	18 06       	cpc	r1, r24
 466:	99 1f       	adc	r25, r25
 468:	f1 cf       	rjmp	.-30     	; 0x44c <__fp_splitA+0xc>
 46a:	86 95       	lsr	r24
 46c:	71 05       	cpc	r23, r1
 46e:	61 05       	cpc	r22, r1
 470:	08 94       	sec
 472:	08 95       	ret

00000474 <__fp_zero>:
 474:	e8 94       	clt

00000476 <__fp_szero>:
 476:	bb 27       	eor	r27, r27
 478:	66 27       	eor	r22, r22
 47a:	77 27       	eor	r23, r23
 47c:	cb 01       	movw	r24, r22
 47e:	97 f9       	bld	r25, 7
 480:	08 95       	ret

00000482 <__divmodsi4>:
 482:	05 2e       	mov	r0, r21
 484:	97 fb       	bst	r25, 7
 486:	1e f4       	brtc	.+6      	; 0x48e <__divmodsi4+0xc>
 488:	00 94       	com	r0
 48a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__negsi2>
 48e:	57 fd       	sbrc	r21, 7
 490:	07 d0       	rcall	.+14     	; 0x4a0 <__divmodsi4_neg2>
 492:	0e 94 60 02 	call	0x4c0	; 0x4c0 <__udivmodsi4>
 496:	07 fc       	sbrc	r0, 7
 498:	03 d0       	rcall	.+6      	; 0x4a0 <__divmodsi4_neg2>
 49a:	4e f4       	brtc	.+18     	; 0x4ae <__divmodsi4_exit>
 49c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__negsi2>

000004a0 <__divmodsi4_neg2>:
 4a0:	50 95       	com	r21
 4a2:	40 95       	com	r20
 4a4:	30 95       	com	r19
 4a6:	21 95       	neg	r18
 4a8:	3f 4f       	sbci	r19, 0xFF	; 255
 4aa:	4f 4f       	sbci	r20, 0xFF	; 255
 4ac:	5f 4f       	sbci	r21, 0xFF	; 255

000004ae <__divmodsi4_exit>:
 4ae:	08 95       	ret

000004b0 <__negsi2>:
 4b0:	90 95       	com	r25
 4b2:	80 95       	com	r24
 4b4:	70 95       	com	r23
 4b6:	61 95       	neg	r22
 4b8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ba:	8f 4f       	sbci	r24, 0xFF	; 255
 4bc:	9f 4f       	sbci	r25, 0xFF	; 255
 4be:	08 95       	ret

000004c0 <__udivmodsi4>:
 4c0:	a1 e2       	ldi	r26, 0x21	; 33
 4c2:	1a 2e       	mov	r1, r26
 4c4:	aa 1b       	sub	r26, r26
 4c6:	bb 1b       	sub	r27, r27
 4c8:	fd 01       	movw	r30, r26
 4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <__udivmodsi4_ep>

000004cc <__udivmodsi4_loop>:
 4cc:	aa 1f       	adc	r26, r26
 4ce:	bb 1f       	adc	r27, r27
 4d0:	ee 1f       	adc	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	a2 17       	cp	r26, r18
 4d6:	b3 07       	cpc	r27, r19
 4d8:	e4 07       	cpc	r30, r20
 4da:	f5 07       	cpc	r31, r21
 4dc:	20 f0       	brcs	.+8      	; 0x4e6 <__udivmodsi4_ep>
 4de:	a2 1b       	sub	r26, r18
 4e0:	b3 0b       	sbc	r27, r19
 4e2:	e4 0b       	sbc	r30, r20
 4e4:	f5 0b       	sbc	r31, r21

000004e6 <__udivmodsi4_ep>:
 4e6:	66 1f       	adc	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	1a 94       	dec	r1
 4f0:	69 f7       	brne	.-38     	; 0x4cc <__udivmodsi4_loop>
 4f2:	60 95       	com	r22
 4f4:	70 95       	com	r23
 4f6:	80 95       	com	r24
 4f8:	90 95       	com	r25
 4fa:	9b 01       	movw	r18, r22
 4fc:	ac 01       	movw	r20, r24
 4fe:	bd 01       	movw	r22, r26
 500:	cf 01       	movw	r24, r30
 502:	08 95       	ret

00000504 <malloc>:
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	91 05       	cpc	r25, r1
 510:	10 f4       	brcc	.+4      	; 0x516 <malloc+0x12>
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <__flp>
 51a:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <__flp+0x1>
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	30 e0       	ldi	r19, 0x00	; 0
 522:	a0 e0       	ldi	r26, 0x00	; 0
 524:	b0 e0       	ldi	r27, 0x00	; 0
 526:	30 97       	sbiw	r30, 0x00	; 0
 528:	19 f1       	breq	.+70     	; 0x570 <malloc+0x6c>
 52a:	40 81       	ld	r20, Z
 52c:	51 81       	ldd	r21, Z+1	; 0x01
 52e:	02 81       	ldd	r16, Z+2	; 0x02
 530:	13 81       	ldd	r17, Z+3	; 0x03
 532:	48 17       	cp	r20, r24
 534:	59 07       	cpc	r21, r25
 536:	c8 f0       	brcs	.+50     	; 0x56a <malloc+0x66>
 538:	84 17       	cp	r24, r20
 53a:	95 07       	cpc	r25, r21
 53c:	69 f4       	brne	.+26     	; 0x558 <malloc+0x54>
 53e:	10 97       	sbiw	r26, 0x00	; 0
 540:	31 f0       	breq	.+12     	; 0x54e <malloc+0x4a>
 542:	12 96       	adiw	r26, 0x02	; 2
 544:	0c 93       	st	X, r16
 546:	12 97       	sbiw	r26, 0x02	; 2
 548:	13 96       	adiw	r26, 0x03	; 3
 54a:	1c 93       	st	X, r17
 54c:	27 c0       	rjmp	.+78     	; 0x59c <malloc+0x98>
 54e:	00 93 76 00 	sts	0x0076, r16	; 0x800076 <__flp>
 552:	10 93 77 00 	sts	0x0077, r17	; 0x800077 <__flp+0x1>
 556:	22 c0       	rjmp	.+68     	; 0x59c <malloc+0x98>
 558:	21 15       	cp	r18, r1
 55a:	31 05       	cpc	r19, r1
 55c:	19 f0       	breq	.+6      	; 0x564 <malloc+0x60>
 55e:	42 17       	cp	r20, r18
 560:	53 07       	cpc	r21, r19
 562:	18 f4       	brcc	.+6      	; 0x56a <malloc+0x66>
 564:	9a 01       	movw	r18, r20
 566:	bd 01       	movw	r22, r26
 568:	ef 01       	movw	r28, r30
 56a:	df 01       	movw	r26, r30
 56c:	f8 01       	movw	r30, r16
 56e:	db cf       	rjmp	.-74     	; 0x526 <malloc+0x22>
 570:	21 15       	cp	r18, r1
 572:	31 05       	cpc	r19, r1
 574:	f9 f0       	breq	.+62     	; 0x5b4 <malloc+0xb0>
 576:	28 1b       	sub	r18, r24
 578:	39 0b       	sbc	r19, r25
 57a:	24 30       	cpi	r18, 0x04	; 4
 57c:	31 05       	cpc	r19, r1
 57e:	80 f4       	brcc	.+32     	; 0x5a0 <malloc+0x9c>
 580:	8a 81       	ldd	r24, Y+2	; 0x02
 582:	9b 81       	ldd	r25, Y+3	; 0x03
 584:	61 15       	cp	r22, r1
 586:	71 05       	cpc	r23, r1
 588:	21 f0       	breq	.+8      	; 0x592 <malloc+0x8e>
 58a:	fb 01       	movw	r30, r22
 58c:	93 83       	std	Z+3, r25	; 0x03
 58e:	82 83       	std	Z+2, r24	; 0x02
 590:	04 c0       	rjmp	.+8      	; 0x59a <malloc+0x96>
 592:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <__flp+0x1>
 596:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__flp>
 59a:	fe 01       	movw	r30, r28
 59c:	32 96       	adiw	r30, 0x02	; 2
 59e:	44 c0       	rjmp	.+136    	; 0x628 <malloc+0x124>
 5a0:	fe 01       	movw	r30, r28
 5a2:	e2 0f       	add	r30, r18
 5a4:	f3 1f       	adc	r31, r19
 5a6:	81 93       	st	Z+, r24
 5a8:	91 93       	st	Z+, r25
 5aa:	22 50       	subi	r18, 0x02	; 2
 5ac:	31 09       	sbc	r19, r1
 5ae:	39 83       	std	Y+1, r19	; 0x01
 5b0:	28 83       	st	Y, r18
 5b2:	3a c0       	rjmp	.+116    	; 0x628 <malloc+0x124>
 5b4:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__brkval>
 5b8:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__brkval+0x1>
 5bc:	23 2b       	or	r18, r19
 5be:	41 f4       	brne	.+16     	; 0x5d0 <malloc+0xcc>
 5c0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 5c4:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 5c8:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <__brkval+0x1>
 5cc:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <__brkval>
 5d0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 5d4:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 5d8:	21 15       	cp	r18, r1
 5da:	31 05       	cpc	r19, r1
 5dc:	41 f4       	brne	.+16     	; 0x5ee <malloc+0xea>
 5de:	2d b7       	in	r18, 0x3d	; 61
 5e0:	3e b7       	in	r19, 0x3e	; 62
 5e2:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 5e6:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 5ea:	24 1b       	sub	r18, r20
 5ec:	35 0b       	sbc	r19, r21
 5ee:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <__brkval>
 5f2:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <__brkval+0x1>
 5f6:	e2 17       	cp	r30, r18
 5f8:	f3 07       	cpc	r31, r19
 5fa:	a0 f4       	brcc	.+40     	; 0x624 <malloc+0x120>
 5fc:	2e 1b       	sub	r18, r30
 5fe:	3f 0b       	sbc	r19, r31
 600:	28 17       	cp	r18, r24
 602:	39 07       	cpc	r19, r25
 604:	78 f0       	brcs	.+30     	; 0x624 <malloc+0x120>
 606:	ac 01       	movw	r20, r24
 608:	4e 5f       	subi	r20, 0xFE	; 254
 60a:	5f 4f       	sbci	r21, 0xFF	; 255
 60c:	24 17       	cp	r18, r20
 60e:	35 07       	cpc	r19, r21
 610:	48 f0       	brcs	.+18     	; 0x624 <malloc+0x120>
 612:	4e 0f       	add	r20, r30
 614:	5f 1f       	adc	r21, r31
 616:	50 93 75 00 	sts	0x0075, r21	; 0x800075 <__brkval+0x1>
 61a:	40 93 74 00 	sts	0x0074, r20	; 0x800074 <__brkval>
 61e:	81 93       	st	Z+, r24
 620:	91 93       	st	Z+, r25
 622:	02 c0       	rjmp	.+4      	; 0x628 <malloc+0x124>
 624:	e0 e0       	ldi	r30, 0x00	; 0
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	cf 01       	movw	r24, r30
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	08 95       	ret

00000634 <free>:
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	09 f4       	brne	.+2      	; 0x63e <free+0xa>
 63c:	81 c0       	rjmp	.+258    	; 0x740 <free+0x10c>
 63e:	fc 01       	movw	r30, r24
 640:	32 97       	sbiw	r30, 0x02	; 2
 642:	13 82       	std	Z+3, r1	; 0x03
 644:	12 82       	std	Z+2, r1	; 0x02
 646:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <__flp>
 64a:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <__flp+0x1>
 64e:	10 97       	sbiw	r26, 0x00	; 0
 650:	81 f4       	brne	.+32     	; 0x672 <free+0x3e>
 652:	20 81       	ld	r18, Z
 654:	31 81       	ldd	r19, Z+1	; 0x01
 656:	82 0f       	add	r24, r18
 658:	93 1f       	adc	r25, r19
 65a:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__brkval>
 65e:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__brkval+0x1>
 662:	28 17       	cp	r18, r24
 664:	39 07       	cpc	r19, r25
 666:	51 f5       	brne	.+84     	; 0x6bc <free+0x88>
 668:	f0 93 75 00 	sts	0x0075, r31	; 0x800075 <__brkval+0x1>
 66c:	e0 93 74 00 	sts	0x0074, r30	; 0x800074 <__brkval>
 670:	67 c0       	rjmp	.+206    	; 0x740 <free+0x10c>
 672:	ed 01       	movw	r28, r26
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	ce 17       	cp	r28, r30
 67a:	df 07       	cpc	r29, r31
 67c:	40 f4       	brcc	.+16     	; 0x68e <free+0x5a>
 67e:	4a 81       	ldd	r20, Y+2	; 0x02
 680:	5b 81       	ldd	r21, Y+3	; 0x03
 682:	9e 01       	movw	r18, r28
 684:	41 15       	cp	r20, r1
 686:	51 05       	cpc	r21, r1
 688:	f1 f0       	breq	.+60     	; 0x6c6 <free+0x92>
 68a:	ea 01       	movw	r28, r20
 68c:	f5 cf       	rjmp	.-22     	; 0x678 <free+0x44>
 68e:	d3 83       	std	Z+3, r29	; 0x03
 690:	c2 83       	std	Z+2, r28	; 0x02
 692:	40 81       	ld	r20, Z
 694:	51 81       	ldd	r21, Z+1	; 0x01
 696:	84 0f       	add	r24, r20
 698:	95 1f       	adc	r25, r21
 69a:	c8 17       	cp	r28, r24
 69c:	d9 07       	cpc	r29, r25
 69e:	59 f4       	brne	.+22     	; 0x6b6 <free+0x82>
 6a0:	88 81       	ld	r24, Y
 6a2:	99 81       	ldd	r25, Y+1	; 0x01
 6a4:	84 0f       	add	r24, r20
 6a6:	95 1f       	adc	r25, r21
 6a8:	02 96       	adiw	r24, 0x02	; 2
 6aa:	91 83       	std	Z+1, r25	; 0x01
 6ac:	80 83       	st	Z, r24
 6ae:	8a 81       	ldd	r24, Y+2	; 0x02
 6b0:	9b 81       	ldd	r25, Y+3	; 0x03
 6b2:	93 83       	std	Z+3, r25	; 0x03
 6b4:	82 83       	std	Z+2, r24	; 0x02
 6b6:	21 15       	cp	r18, r1
 6b8:	31 05       	cpc	r19, r1
 6ba:	29 f4       	brne	.+10     	; 0x6c6 <free+0x92>
 6bc:	f0 93 77 00 	sts	0x0077, r31	; 0x800077 <__flp+0x1>
 6c0:	e0 93 76 00 	sts	0x0076, r30	; 0x800076 <__flp>
 6c4:	3d c0       	rjmp	.+122    	; 0x740 <free+0x10c>
 6c6:	e9 01       	movw	r28, r18
 6c8:	fb 83       	std	Y+3, r31	; 0x03
 6ca:	ea 83       	std	Y+2, r30	; 0x02
 6cc:	49 91       	ld	r20, Y+
 6ce:	59 91       	ld	r21, Y+
 6d0:	c4 0f       	add	r28, r20
 6d2:	d5 1f       	adc	r29, r21
 6d4:	ec 17       	cp	r30, r28
 6d6:	fd 07       	cpc	r31, r29
 6d8:	61 f4       	brne	.+24     	; 0x6f2 <free+0xbe>
 6da:	80 81       	ld	r24, Z
 6dc:	91 81       	ldd	r25, Z+1	; 0x01
 6de:	84 0f       	add	r24, r20
 6e0:	95 1f       	adc	r25, r21
 6e2:	02 96       	adiw	r24, 0x02	; 2
 6e4:	e9 01       	movw	r28, r18
 6e6:	99 83       	std	Y+1, r25	; 0x01
 6e8:	88 83       	st	Y, r24
 6ea:	82 81       	ldd	r24, Z+2	; 0x02
 6ec:	93 81       	ldd	r25, Z+3	; 0x03
 6ee:	9b 83       	std	Y+3, r25	; 0x03
 6f0:	8a 83       	std	Y+2, r24	; 0x02
 6f2:	e0 e0       	ldi	r30, 0x00	; 0
 6f4:	f0 e0       	ldi	r31, 0x00	; 0
 6f6:	12 96       	adiw	r26, 0x02	; 2
 6f8:	8d 91       	ld	r24, X+
 6fa:	9c 91       	ld	r25, X
 6fc:	13 97       	sbiw	r26, 0x03	; 3
 6fe:	00 97       	sbiw	r24, 0x00	; 0
 700:	19 f0       	breq	.+6      	; 0x708 <free+0xd4>
 702:	fd 01       	movw	r30, r26
 704:	dc 01       	movw	r26, r24
 706:	f7 cf       	rjmp	.-18     	; 0x6f6 <free+0xc2>
 708:	8d 91       	ld	r24, X+
 70a:	9c 91       	ld	r25, X
 70c:	11 97       	sbiw	r26, 0x01	; 1
 70e:	9d 01       	movw	r18, r26
 710:	2e 5f       	subi	r18, 0xFE	; 254
 712:	3f 4f       	sbci	r19, 0xFF	; 255
 714:	82 0f       	add	r24, r18
 716:	93 1f       	adc	r25, r19
 718:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <__brkval>
 71c:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <__brkval+0x1>
 720:	28 17       	cp	r18, r24
 722:	39 07       	cpc	r19, r25
 724:	69 f4       	brne	.+26     	; 0x740 <free+0x10c>
 726:	30 97       	sbiw	r30, 0x00	; 0
 728:	29 f4       	brne	.+10     	; 0x734 <free+0x100>
 72a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <__flp+0x1>
 72e:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <__flp>
 732:	02 c0       	rjmp	.+4      	; 0x738 <free+0x104>
 734:	13 82       	std	Z+3, r1	; 0x03
 736:	12 82       	std	Z+2, r1	; 0x02
 738:	b0 93 75 00 	sts	0x0075, r27	; 0x800075 <__brkval+0x1>
 73c:	a0 93 74 00 	sts	0x0074, r26	; 0x800074 <__brkval>
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	08 95       	ret

00000746 <_exit>:
 746:	f8 94       	cli

00000748 <__stop_program>:
 748:	ff cf       	rjmp	.-2      	; 0x748 <__stop_program>
