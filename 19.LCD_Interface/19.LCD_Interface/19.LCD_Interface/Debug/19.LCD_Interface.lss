
19.LCD_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000df4  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081d  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000595  00000000  00000000  00001949  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00001ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000476  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e0  00000000  00000000  000024aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002b8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 af 00 	call	0x15e	; 0x15e <main>
  7a:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Flash_LCD>:
		Send_String(" ");
	}

	Send_String_to_Location(x, y, stringToDisplay);
	
}
  82:	96 9a       	sbi	0x12, 6	; 18
  84:	00 00       	nop
  86:	00 00       	nop
  88:	96 98       	cbi	0x12, 6	; 18
  8a:	08 95       	ret

0000008c <isBusy>:
  8c:	1a ba       	out	0x1a, r1	; 26
  8e:	95 9a       	sbi	0x12, 5	; 18
  90:	94 98       	cbi	0x12, 4	; 18
  92:	df 9b       	sbis	0x1b, 7	; 27
  94:	04 c0       	rjmp	.+8      	; 0x9e <isBusy+0x12>
  96:	0e 94 41 00 	call	0x82	; 0x82 <Flash_LCD>
  9a:	df 99       	sbic	0x1b, 7	; 27
  9c:	fc cf       	rjmp	.-8      	; 0x96 <isBusy+0xa>
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	08 95       	ret

000000a4 <Send_Command>:
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
  a8:	0e 94 46 00 	call	0x8c	; 0x8c <isBusy>
  ac:	cb bb       	out	0x1b, r28	; 27
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	8f 7c       	andi	r24, 0xCF	; 207
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	0e 94 41 00 	call	0x82	; 0x82 <Flash_LCD>
  b8:	1b ba       	out	0x1b, r1	; 27
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <Send_Character>:
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
  c2:	0e 94 46 00 	call	0x8c	; 0x8c <isBusy>
  c6:	cb bb       	out	0x1b, r28	; 27
  c8:	95 98       	cbi	0x12, 5	; 18
  ca:	94 9a       	sbi	0x12, 4	; 18
  cc:	0e 94 41 00 	call	0x82	; 0x82 <Flash_LCD>
  d0:	1b ba       	out	0x1b, r1	; 27
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <Send_String>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
  dc:	88 81       	ld	r24, Y
  de:	88 23       	and	r24, r24
  e0:	31 f0       	breq	.+12     	; 0xee <Send_String+0x18>
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	0e 94 5f 00 	call	0xbe	; 0xbe <Send_Character>
  e8:	89 91       	ld	r24, Y+
  ea:	81 11       	cpse	r24, r1
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <Send_String+0xe>
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <Write_to>:
  f4:	e6 2f       	mov	r30, r22
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	e1 5a       	subi	r30, 0xA1	; 161
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	81 58       	subi	r24, 0x81	; 129
  fe:	90 81       	ld	r25, Z
 100:	89 0f       	add	r24, r25
 102:	0e 94 52 00 	call	0xa4	; 0xa4 <Send_Command>
 106:	08 95       	ret

00000108 <Send_String_to_Location>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ea 01       	movw	r28, r20
 10e:	0e 94 7a 00 	call	0xf4	; 0xf4 <Write_to>
 112:	ce 01       	movw	r24, r28
 114:	0e 94 6b 00 	call	0xd6	; 0xd6 <Send_String>
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <move_string>:
	Write_to(x,y);
	Send_String(stringOfChars);
}

void move_string(uint8_t y, char* stringOfChars)
{
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	d8 2f       	mov	r29, r24
 128:	8b 01       	movw	r16, r22
 12a:	c1 e0       	ldi	r28, 0x01	; 1
	for (int cnt = 1; cnt <= 16; cnt++)
	{
		Send_String_to_Location(cnt,y,stringOfChars);
 12c:	a8 01       	movw	r20, r16
 12e:	6d 2f       	mov	r22, r29
 130:	8c 2f       	mov	r24, r28
 132:	0e 94 84 00 	call	0x108	; 0x108 <Send_String_to_Location>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	83 e2       	ldi	r24, 0x23	; 35
 138:	94 ef       	ldi	r25, 0xF4	; 244
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <move_string+0x1c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <move_string+0x22>
 140:	00 00       	nop
		_delay_ms(250);
		Send_String_to_Location(cnt,y," ");
 142:	42 e6       	ldi	r20, 0x62	; 98
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	6d 2f       	mov	r22, r29
 148:	8c 2f       	mov	r24, r28
 14a:	0e 94 84 00 	call	0x108	; 0x108 <Send_String_to_Location>
 14e:	cf 5f       	subi	r28, 0xFF	; 255
	Send_String(stringOfChars);
}

void move_string(uint8_t y, char* stringOfChars)
{
	for (int cnt = 1; cnt <= 16; cnt++)
 150:	c1 31       	cpi	r28, 0x11	; 17
 152:	61 f7       	brne	.-40     	; 0x12c <move_string+0xe>
	{
		Send_String_to_Location(cnt,y,stringOfChars);
		_delay_ms(250);
		Send_String_to_Location(cnt,y," ");
	}
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <main>:
#define Enable_Pin			6
#define Read_Write			5

 int main(void)
 {
	 DataDir_Control |= ((1 << Enable_Pin) | (1 << Read_Write) | (1 << RS_Pin));
 15e:	81 b3       	in	r24, 0x11	; 17
 160:	80 67       	ori	r24, 0x70	; 112
 162:	81 bb       	out	0x11, r24	; 17
 164:	85 ea       	ldi	r24, 0xA5	; 165
 166:	9e e0       	ldi	r25, 0x0E	; 14
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0xa>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x10>
 16e:	00 00       	nop
	 _delay_ms(15);

	 Send_Command(0x01);                          //Clear screen 0x01 = 00000001
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 52 00 	call	0xa4	; 0xa4 <Send_Command>
 176:	83 ef       	ldi	r24, 0xF3	; 243
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <main+0x1c>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x22>
 180:	00 00       	nop
	 _delay_ms(2);
	 Send_Command(0x38);                          //Enable 8-bit mode
 182:	88 e3       	ldi	r24, 0x38	; 56
 184:	0e 94 52 00 	call	0xa4	; 0xa4 <Send_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	90 e1       	ldi	r25, 0x10	; 16
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0x2c>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x32>
	 _delay_us(50);
	 Send_Command(0b00001110);                    //LCD configuration
 190:	8e e0       	ldi	r24, 0x0E	; 14
 192:	0e 94 52 00 	call	0xa4	; 0xa4 <Send_Command>
 196:	80 e1       	ldi	r24, 0x10	; 16
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x3a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x40>

	 

	 while (1)
	 {
		move_string(1,"Delhzwna");
 19e:	64 e6       	ldi	r22, 0x64	; 100
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 8f 00 	call	0x11e	; 0x11e <move_string>
		move_string(2,"Gamiesai");
 1a8:	6d e6       	ldi	r22, 0x6D	; 109
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	0e 94 8f 00 	call	0x11e	; 0x11e <move_string>
 1b2:	f5 cf       	rjmp	.-22     	; 0x19e <main+0x40>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
