
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  0000019c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000006e  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001ab  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000012a  00000000  00000000  000003d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b6  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000010a  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000040  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000842  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  74:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ProcessPressedButton>:
	return 0;
}

void ProcessPressedButton(void)
{
	if (pressed == 0)
  7c:	80 91 60 00 	lds	r24, 0x0060
  80:	90 91 61 00 	lds	r25, 0x0061
  84:	89 2b       	or	r24, r25
  86:	d1 f5       	brne	.+116    	; 0xfc <ProcessPressedButton+0x80>
	{
		pressed = 1;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	90 93 61 00 	sts	0x0061, r25
  90:	80 93 60 00 	sts	0x0060, r24
		PORTD |= (1 << LEDNumber);
  94:	42 b3       	in	r20, 0x12	; 18
  96:	20 91 62 00 	lds	r18, 0x0062
  9a:	30 91 63 00 	lds	r19, 0x0063
  9e:	02 2e       	mov	r0, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <ProcessPressedButton+0x2a>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <ProcessPressedButton+0x26>
  aa:	48 2b       	or	r20, r24
  ac:	42 bb       	out	0x12, r20	; 18
		LEDNumber++;
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	30 93 63 00 	sts	0x0063, r19
  b6:	20 93 62 00 	sts	0x0062, r18
		if (LEDNumber > 5)
  ba:	26 30       	cpi	r18, 0x06	; 6
  bc:	31 05       	cpc	r19, r1
  be:	f4 f0       	brlt	.+60     	; 0xfc <ProcessPressedButton+0x80>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (i = 0; i < 10; i++)         //When somebody wins this happens.
			{
				PORTD = 0b11111111;
  c4:	7f ef       	ldi	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c6:	40 e2       	ldi	r20, 0x20	; 32
  c8:	5e e4       	ldi	r21, 0x4E	; 78
				_delay_ms(10);
				PORTD = 0b11000000;
  ca:	60 ec       	ldi	r22, 0xC0	; 192
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <ProcessPressedButton+0x66>
		LEDNumber++;
		if (LEDNumber > 5)
		{
			for (i = 0; i < 10; i++)         //When somebody wins this happens.
			{
				PORTD = 0b11111111;
  ce:	72 bb       	out	0x12, r23	; 18
  d0:	ca 01       	movw	r24, r20
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <ProcessPressedButton+0x56>
				_delay_ms(10);
				PORTD = 0b11000000;
  d6:	62 bb       	out	0x12, r22	; 18
  d8:	ca 01       	movw	r24, r20
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <ProcessPressedButton+0x5e>
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
		pressed = 1;
		PORTD |= (1 << LEDNumber);
		LEDNumber++;
		if (LEDNumber > 5)
		{
			for (i = 0; i < 10; i++)         //When somebody wins this happens.
  e2:	2a 30       	cpi	r18, 0x0A	; 10
  e4:	31 05       	cpc	r19, r1
  e6:	9c f3       	brlt	.-26     	; 0xce <ProcessPressedButton+0x52>
  e8:	30 93 65 00 	sts	0x0065, r19
  ec:	20 93 64 00 	sts	0x0064, r18
				PORTD = 0b11111111;
				_delay_ms(10);
				PORTD = 0b11000000;
				_delay_ms(10);
			}
			PORTD = 0b11000000;                 //Initialize  in order to play again.
  f0:	80 ec       	ldi	r24, 0xC0	; 192
  f2:	82 bb       	out	0x12, r24	; 18
		LEDNumber = 0;
  f4:	10 92 63 00 	sts	0x0063, r1
  f8:	10 92 62 00 	sts	0x0062, r1
  fc:	08 95       	ret

000000fe <main>:
int LEDNumber = 0;
int i;

int main(void)
{
	DDRD = 0b00111111;
  fe:	8f e3       	ldi	r24, 0x3F	; 63
 100:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b11000000;
 102:	80 ec       	ldi	r24, 0xC0	; 192
 104:	82 bb       	out	0x12, r24	; 18
	
	while(1)
	{
		if(bit_is_clear(PIND, 6))
 106:	86 99       	sbic	0x10, 6	; 16
 108:	03 c0       	rjmp	.+6      	; 0x110 <main+0x12>
		{
			ProcessPressedButton();
 10a:	0e 94 3e 00 	call	0x7c	; 0x7c <ProcessPressedButton>
 10e:	fb cf       	rjmp	.-10     	; 0x106 <main+0x8>
	}
}

void ProcessReleasedButton(void)
{
	pressed = 0;
 110:	10 92 61 00 	sts	0x0061, r1
 114:	10 92 60 00 	sts	0x0060, r1
 118:	f6 cf       	rjmp	.-20     	; 0x106 <main+0x8>

0000011a <ProcessReleasedButton>:
 11a:	10 92 61 00 	sts	0x0061, r1
 11e:	10 92 60 00 	sts	0x0060, r1
}
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
