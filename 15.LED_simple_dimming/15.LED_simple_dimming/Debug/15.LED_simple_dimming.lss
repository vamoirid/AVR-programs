
15.LED_simple_dimming.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000637  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059a  00000000  00000000  000007e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000346  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  00001372  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001419  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
    DDRB |= (1 << DDB3);                                 //Set PINB3 (OC0) as output
  6c:	bb 9a       	sbi	0x17, 3	; 23
	PORTB &= ~(1 << PORTB3);                             //Clear PINB3
  6e:	c3 98       	cbi	0x18, 3	; 24
	TCCR0 |= (1 << CS01);                                //Set a prescaler of 8
  70:	83 b7       	in	r24, 0x33	; 51
  72:	82 60       	ori	r24, 0x02	; 2
  74:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= ((1 << WGM00) | (WGM01));                   //Set Timer0 on Fast PWM mode
  76:	83 b7       	in	r24, 0x33	; 51
  78:	83 64       	ori	r24, 0x43	; 67
  7a:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= (1 << COM01);                               //Clear OC0 on Compare Match and set it on BOTTOM 
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	83 bf       	out	0x33, r24	; 51
	OCR0 = 0;
  82:	1c be       	out	0x3c, r1	; 60

	int dutyCycle = 0;
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
			_delay_ms(3);
		}

		while (dutyCycle > 0)
		{
			OCR0 = dutyCycle--;
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	0b c0       	rjmp	.+22     	; 0xa4 <main+0x38>

    while (1) 
    {
		while (dutyCycle < 255)
		{
			OCR0 = dutyCycle++;
  8e:	ac 01       	movw	r20, r24
  90:	4f 5f       	subi	r20, 0xFF	; 255
  92:	5f 4f       	sbci	r21, 0xFF	; 255
  94:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	8d ee       	ldi	r24, 0xED	; 237
  98:	92 e0       	ldi	r25, 0x02	; 2
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <main+0x2e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <main+0x34>
  a0:	00 00       	nop
  a2:	ca 01       	movw	r24, r20

	int dutyCycle = 0;

    while (1) 
    {
		while (dutyCycle < 255)
  a4:	8f 3f       	cpi	r24, 0xFF	; 255
  a6:	91 05       	cpc	r25, r1
  a8:	94 f3       	brlt	.-28     	; 0x8e <main+0x22>
		{
			OCR0 = dutyCycle++;
			_delay_ms(3);
		}

		while (dutyCycle > 0)
  aa:	18 16       	cp	r1, r24
  ac:	19 06       	cpc	r1, r25
  ae:	d4 f7       	brge	.-12     	; 0xa4 <main+0x38>
		{
			OCR0 = dutyCycle--;
  b0:	8c bf       	out	0x3c, r24	; 60
  b2:	ed ee       	ldi	r30, 0xED	; 237
  b4:	f2 e0       	ldi	r31, 0x02	; 2
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4a>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x50>
  bc:	00 00       	nop
  be:	01 97       	sbiw	r24, 0x01	; 1
		{
			OCR0 = dutyCycle++;
			_delay_ms(3);
		}

		while (dutyCycle > 0)
  c0:	b9 f7       	brne	.-18     	; 0xb0 <main+0x44>
		{
			OCR0 = dutyCycle--;
  c2:	83 2f       	mov	r24, r19
  c4:	92 2f       	mov	r25, r18
  c6:	ee cf       	rjmp	.-36     	; 0xa4 <main+0x38>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
