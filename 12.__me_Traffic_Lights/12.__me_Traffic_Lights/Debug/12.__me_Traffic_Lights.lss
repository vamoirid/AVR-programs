
12.__me_Traffic_Lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000574  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000574  00000608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800066  00800066  0000060e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a2  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f2  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000432  00000000  00000000  00001448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000412  00000000  00000000  0000190c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000272  00000000  00000000  00001d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a6 e6       	ldi	r26, 0x66	; 102
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 37       	cpi	r26, 0x75	; 117
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e4 e7       	ldi	r30, 0x74	; 116
  78:	f5 e0       	ldi	r31, 0x05	; 5
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  8a:	0c 94 b8 02 	jmp	0x570	; 0x570 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ButtonInit>:
unsigned int *PressedConfidenceLevel;
unsigned int *ReleasedConfidenceLevel;


void ButtonInit(uint8_t NumberOfButtons)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	pressed = malloc(sizeof(uint8_t)*NumberOfButtons);
  96:	c8 2f       	mov	r28, r24
  98:	d0 e0       	ldi	r29, 0x00	; 0
  9a:	ce 01       	movw	r24, r28
  9c:	0e 94 97 01 	call	0x32e	; 0x32e <malloc>
  a0:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <pressed+0x1>
  a4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <pressed>
	PressedConfidenceLevel = malloc(sizeof(uint8_t)*NumberOfButtons);
  a8:	ce 01       	movw	r24, r28
  aa:	0e 94 97 01 	call	0x32e	; 0x32e <malloc>
  ae:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <PressedConfidenceLevel+0x1>
  b2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <PressedConfidenceLevel>
	ReleasedConfidenceLevel = malloc(sizeof(uint8_t)*NumberOfButtons);
  b6:	ce 01       	movw	r24, r28
  b8:	0e 94 97 01 	call	0x32e	; 0x32e <malloc>
  bc:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <ReleasedConfidenceLevel+0x1>
  c0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <ReleasedConfidenceLevel>
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <isButtonPressed>:

uint8_t isButtonPressed(uint8_t PINRegister, uint8_t ButtonPin, uint16_t ConfidenceLevel, uint8_t ButtonNumber)
{
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	1f 92       	push	r1
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	89 83       	std	Y+1, r24	; 0x01
	if(bit_is_clear(PINRegister, ButtonPin))
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <isButtonPressed+0x16>
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <isButtonPressed+0x12>
  e4:	80 fd       	sbrc	r24, 0
  e6:	31 c0       	rjmp	.+98     	; 0x14a <isButtonPressed+0x80>
	{
		PressedConfidenceLevel[ButtonNumber]++;
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	b9 01       	movw	r22, r18
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <PressedConfidenceLevel>
  f4:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <PressedConfidenceLevel+0x1>
  f8:	e6 0f       	add	r30, r22
  fa:	f7 1f       	adc	r31, r23
  fc:	80 81       	ld	r24, Z
  fe:	91 81       	ldd	r25, Z+1	; 0x01
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	91 83       	std	Z+1, r25	; 0x01
 104:	80 83       	st	Z, r24
		if(PressedConfidenceLevel[ButtonNumber] > ConfidenceLevel)
 106:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <PressedConfidenceLevel>
 10a:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <PressedConfidenceLevel+0x1>
 10e:	e6 0f       	add	r30, r22
 110:	f7 1f       	adc	r31, r23
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	48 17       	cp	r20, r24
 118:	59 07       	cpc	r21, r25
 11a:	e8 f5       	brcc	.+122    	; 0x196 <isButtonPressed+0xcc>
		{
			if (pressed[ButtonNumber] == 0)
 11c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <pressed>
 120:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <pressed+0x1>
 124:	fc 01       	movw	r30, r24
 126:	e2 0f       	add	r30, r18
 128:	f3 1f       	adc	r31, r19
 12a:	80 81       	ld	r24, Z
 12c:	81 11       	cpse	r24, r1
 12e:	35 c0       	rjmp	.+106    	; 0x19a <isButtonPressed+0xd0>
			{
				pressed[ButtonNumber] = 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 83       	st	Z, r24
				PressedConfidenceLevel[ButtonNumber] = 0;
 134:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <PressedConfidenceLevel>
 138:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <PressedConfidenceLevel+0x1>
 13c:	fc 01       	movw	r30, r24
 13e:	e6 0f       	add	r30, r22
 140:	f7 1f       	adc	r31, r23
 142:	11 82       	std	Z+1, r1	; 0x01
 144:	10 82       	st	Z, r1
				return 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	2b c0       	rjmp	.+86     	; 0x1a0 <isButtonPressed+0xd6>
			}
		}
	}
	else
	{
		ReleasedConfidenceLevel[ButtonNumber]++;
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	c9 01       	movw	r24, r18
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <ReleasedConfidenceLevel>
 156:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <ReleasedConfidenceLevel+0x1>
 15a:	e8 0f       	add	r30, r24
 15c:	f9 1f       	adc	r31, r25
 15e:	60 81       	ld	r22, Z
 160:	71 81       	ldd	r23, Z+1	; 0x01
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	71 83       	std	Z+1, r23	; 0x01
 168:	60 83       	st	Z, r22
		if(ReleasedConfidenceLevel[ButtonNumber] > ConfidenceLevel)
 16a:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <ReleasedConfidenceLevel>
 16e:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <ReleasedConfidenceLevel+0x1>
 172:	fb 01       	movw	r30, r22
 174:	e8 0f       	add	r30, r24
 176:	f9 1f       	adc	r31, r25
 178:	80 81       	ld	r24, Z
 17a:	91 81       	ldd	r25, Z+1	; 0x01
 17c:	48 17       	cp	r20, r24
 17e:	59 07       	cpc	r21, r25
 180:	70 f4       	brcc	.+28     	; 0x19e <isButtonPressed+0xd4>
		{
			pressed[ButtonNumber] = 0;
 182:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <pressed>
 186:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <pressed+0x1>
 18a:	fc 01       	movw	r30, r24
 18c:	e2 0f       	add	r30, r18
 18e:	f3 1f       	adc	r31, r19
 190:	10 82       	st	Z, r1
		}
	}
	return 0;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	05 c0       	rjmp	.+10     	; 0x1a0 <isButtonPressed+0xd6>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <isButtonPressed+0xd6>
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <isButtonPressed+0xd6>
 19e:	80 e0       	ldi	r24, 0x00	; 0
}
 1a0:	0f 90       	pop	r0
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <__vector_4>:
volatile unsigned long int milliseconds = 0;

//Interrupt Function

ISR(TIMER2_COMP_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
	++milliseconds;
 1ba:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 1be:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 1c2:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <__data_end+0x2>
 1c6:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <__data_end+0x3>
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	a1 1d       	adc	r26, r1
 1ce:	b1 1d       	adc	r27, r1
 1d0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
 1d4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 1d8:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <__data_end+0x2>
 1dc:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <__data_end+0x3>
}
 1e0:	bf 91       	pop	r27
 1e2:	af 91       	pop	r26
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <main>:

int main(void)
{
	//Configuring outputs

	DDRB |= (1 << RedCarLight);
 1f2:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1 << YellowCarLight);
 1f4:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1 << GreenCarLight);
 1f6:	ba 9a       	sbi	0x17, 2	; 23
	DDRD |= (1 << RedPedLight);
 1f8:	8c 9a       	sbi	0x11, 4	; 17
	DDRD |= (1 << GreenPedLight);
 1fa:	8d 9a       	sbi	0x11, 5	; 17

	//Configuring inputs

	DDRD &= ~(1 << ButtonPin);
 1fc:	8e 98       	cbi	0x11, 6	; 17
    
	//Setting outputs to LOW reading

	PORTB &= ~(1 << RedCarLight);
 1fe:	c0 98       	cbi	0x18, 0	; 24
	PORTB &= ~(1 << YellowCarLight);
 200:	c1 98       	cbi	0x18, 1	; 24
	PORTB &= ~(1 << GreenCarLight);
 202:	c2 98       	cbi	0x18, 2	; 24
	PORTD &= ~(1 << RedPedLight);
 204:	94 98       	cbi	0x12, 4	; 18
	PORTD &= ~(1 << GreenPedLight);
 206:	95 98       	cbi	0x12, 5	; 18

	//Setting inputs to HIGH reading

	PORTD |= (1 << ButtonPin);
 208:	96 9a       	sbi	0x12, 6	; 18

	int FirstTime = 1;

	//About Timer1

	TCCR1B |= ((1 << CS10) | (1 << CS11));                     //Set a prescaler of 64 in 16-bit Timer1
 20a:	8e b5       	in	r24, 0x2e	; 46
 20c:	83 60       	ori	r24, 0x03	; 3
 20e:	8e bd       	out	0x2e, r24	; 46

	//About Timer2

	TCCR2 |= (1 << CS21);                 //Set a prescale of 8 in 8-bit Timer2
 210:	85 b5       	in	r24, 0x25	; 37
 212:	82 60       	ori	r24, 0x02	; 2
 214:	85 bd       	out	0x25, r24	; 37
	OCR2 = 125;                           //Set 1kHz cycle at 1MHz AVR clock with a prescale of 8
 216:	8d e7       	ldi	r24, 0x7D	; 125
 218:	83 bd       	out	0x23, r24	; 35
	TCCR2 |= (1 << WGM21);                //Set 8-bit Timer2 in CTC mode
 21a:	85 b5       	in	r24, 0x25	; 37
 21c:	88 60       	ori	r24, 0x08	; 8
 21e:	85 bd       	out	0x25, r24	; 37
	sei();                                //Set global interrupt enable bit
 220:	78 94       	sei
	TIMSK |= (1 << OCIE2);                //Enable CTC interrupt for timer2
 222:	89 b7       	in	r24, 0x39	; 57
 224:	80 68       	ori	r24, 0x80	; 128
 226:	89 bf       	out	0x39, r24	; 57

	//Initialize Buttons for ButtonPress.h

	ButtonInit(1);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 49 00 	call	0x92	; 0x92 <ButtonInit>
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	90 e0       	ldi	r25, 0x00	; 0

	int i;

	for (i = 0; i < 3; i++)
	{
		TCNT1 = 0;
 232:	1d bc       	out	0x2d, r1	; 45
 234:	1c bc       	out	0x2c, r1	; 44
		CurrentTime = TCNT1;
 236:	4c b5       	in	r20, 0x2c	; 44
 238:	5d b5       	in	r21, 0x2d	; 45

		do
		{
			PORTB |= ((1 << RedCarLight) | (1 << YellowCarLight) | (1 << GreenCarLight));
 23a:	28 b3       	in	r18, 0x18	; 24
 23c:	27 60       	ori	r18, 0x07	; 7
 23e:	28 bb       	out	0x18, r18	; 24
			PORTD |= ((1 << RedPedLight) | (1 << GreenPedLight));
 240:	22 b3       	in	r18, 0x12	; 18
 242:	20 63       	ori	r18, 0x30	; 48
 244:	22 bb       	out	0x12, r18	; 18
		} while (TCNT1 - CurrentTime < 15624);
 246:	2c b5       	in	r18, 0x2c	; 44
 248:	3d b5       	in	r19, 0x2d	; 45
 24a:	24 1b       	sub	r18, r20
 24c:	35 0b       	sbc	r19, r21
 24e:	28 30       	cpi	r18, 0x08	; 8
 250:	3d 43       	sbci	r19, 0x3D	; 61
 252:	98 f3       	brcs	.-26     	; 0x23a <main+0x48>

		do
		{
			PORTB &= ~((1 << RedCarLight) | (1 << YellowCarLight) | (1 << GreenCarLight));
 254:	28 b3       	in	r18, 0x18	; 24
 256:	28 7f       	andi	r18, 0xF8	; 248
 258:	28 bb       	out	0x18, r18	; 24
			PORTD &= ~((1 << RedPedLight) | (1 << GreenPedLight));
 25a:	22 b3       	in	r18, 0x12	; 18
 25c:	2f 7c       	andi	r18, 0xCF	; 207
 25e:	22 bb       	out	0x12, r18	; 18
		} while (TCNT1 - CurrentTime < 2*15624);
 260:	2c b5       	in	r18, 0x2c	; 44
 262:	3d b5       	in	r19, 0x2d	; 45
 264:	24 1b       	sub	r18, r20
 266:	35 0b       	sbc	r19, r21
 268:	20 31       	cpi	r18, 0x10	; 16
 26a:	3a 47       	sbci	r19, 0x7A	; 122
 26c:	98 f3       	brcs	.-26     	; 0x254 <main+0x62>
 26e:	01 97       	sbiw	r24, 0x01	; 1

	//TEST CODE

	int i;

	for (i = 0; i < 3; i++)
 270:	01 f7       	brne	.-64     	; 0x232 <main+0x40>
		} while (TCNT1 - CurrentTime < 2*15624);
	}

	//Default state for the lights
	
	PORTB |= (1 << GreenCarLight);
 272:	c2 9a       	sbi	0x18, 2	; 24
	PORTD |= (1 << RedPedLight);
 274:	94 9a       	sbi	0x12, 4	; 18

	//Initialize timer

	TCNT1 = 0;
 276:	1d bc       	out	0x2d, r1	; 45
 278:	1c bc       	out	0x2c, r1	; 44

	int CurrentTime = 0;

	//Variable in order to check the first time in the while loop

	int FirstTime = 1;
 27a:	c1 e0       	ldi	r28, 0x01	; 1
 27c:	d0 e0       	ldi	r29, 0x00	; 0
	PORTD |= (1 << ButtonPin);

	//ButtonPin states

	uint8_t SwitchState = 0;
	uint8_t PreviousSwitchState = 0;
 27e:	10 e0       	ldi	r17, 0x00	; 0
		{	
			TCNT1 = 0;
			
			if (FirstTime == 1)
			{
				FirstTime = 0;
 280:	00 e0       	ldi	r16, 0x00	; 0
 282:	f1 2c       	mov	r15, r1

	//Loop operation

    while (1) 
    {
		SwitchState = isButtonPressed(PIND, 6, 200, 1);
 284:	80 b3       	in	r24, 0x10	; 16
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	48 ec       	ldi	r20, 0xC8	; 200
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	0e 94 65 00 	call	0xca	; 0xca <isButtonPressed>

		if (SwitchState == 1)
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	09 f0       	breq	.+2      	; 0x298 <main+0xa6>
 296:	45 c0       	rjmp	.+138    	; 0x322 <main+0x130>
		{	
			TCNT1 = 0;
 298:	1d bc       	out	0x2d, r1	; 45
 29a:	1c bc       	out	0x2c, r1	; 44
			
			if (FirstTime == 1)
 29c:	c1 30       	cpi	r28, 0x01	; 1
 29e:	d1 05       	cpc	r29, r1
 2a0:	71 f0       	breq	.+28     	; 0x2be <main+0xcc>
			}
			else 
			{
				do 
				{
				} while (milliseconds < 6000);
 2a2:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <__data_end>
 2a6:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <__data_end+0x1>
 2aa:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <__data_end+0x2>
 2ae:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <__data_end+0x3>
 2b2:	40 37       	cpi	r20, 0x70	; 112
 2b4:	57 41       	sbci	r21, 0x17	; 23
 2b6:	61 05       	cpc	r22, r1
 2b8:	71 05       	cpc	r23, r1
 2ba:	98 f3       	brcs	.-26     	; 0x2a2 <main+0xb0>
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <main+0xd0>
		{	
			TCNT1 = 0;
			
			if (FirstTime == 1)
			{
				FirstTime = 0;
 2be:	c0 2f       	mov	r28, r16
 2c0:	df 2d       	mov	r29, r15
			{
				do 
				{
				} while (milliseconds < 6000);
			}
			if (SwitchState != PreviousSwitchState)
 2c2:	11 30       	cpi	r17, 0x01	; 1
 2c4:	31 f1       	breq	.+76     	; 0x312 <main+0x120>
			{	
				PORTB &= ~(1 << GreenCarLight);
 2c6:	c2 98       	cbi	0x18, 2	; 24
				TCNT1 = 0;
 2c8:	1d bc       	out	0x2d, r1	; 45
 2ca:	1c bc       	out	0x2c, r1	; 44

				do {
					PORTB |= (1 << YellowCarLight);
 2cc:	c1 9a       	sbi	0x18, 1	; 24
				} while (TCNT1 < 3*15624);
 2ce:	2c b5       	in	r18, 0x2c	; 44
 2d0:	3d b5       	in	r19, 0x2d	; 45
 2d2:	28 31       	cpi	r18, 0x18	; 24
 2d4:	37 4b       	sbci	r19, 0xB7	; 183
 2d6:	d0 f3       	brcs	.-12     	; 0x2cc <main+0xda>

				PORTB &= ~(1 << YellowCarLight);
 2d8:	c1 98       	cbi	0x18, 1	; 24
				PORTD &= ~(1 << RedPedLight);
 2da:	94 98       	cbi	0x12, 4	; 18

				for (i = 0; i < 2; i++)
				{
					TCNT1 = 0;
 2dc:	1d bc       	out	0x2d, r1	; 45
 2de:	1c bc       	out	0x2c, r1	; 44
					

					do 
					{
						PORTB |= (1 << RedCarLight);
 2e0:	c0 9a       	sbi	0x18, 0	; 24
						PORTD |= (1 << GreenPedLight);
 2e2:	95 9a       	sbi	0x12, 5	; 18
					} while (TCNT1 < 3*15624);
 2e4:	2c b5       	in	r18, 0x2c	; 44
 2e6:	3d b5       	in	r19, 0x2d	; 45
 2e8:	28 31       	cpi	r18, 0x18	; 24
 2ea:	37 4b       	sbci	r19, 0xB7	; 183
 2ec:	c8 f3       	brcs	.-14     	; 0x2e0 <main+0xee>
				PORTB &= ~(1 << YellowCarLight);
				PORTD &= ~(1 << RedPedLight);

				for (i = 0; i < 2; i++)
				{
					TCNT1 = 0;
 2ee:	1d bc       	out	0x2d, r1	; 45
 2f0:	1c bc       	out	0x2c, r1	; 44
					

					do 
					{
						PORTB |= (1 << RedCarLight);
 2f2:	c0 9a       	sbi	0x18, 0	; 24
						PORTD |= (1 << GreenPedLight);
 2f4:	95 9a       	sbi	0x12, 5	; 18
					} while (TCNT1 < 3*15624);
 2f6:	2c b5       	in	r18, 0x2c	; 44
 2f8:	3d b5       	in	r19, 0x2d	; 45
 2fa:	28 31       	cpi	r18, 0x18	; 24
 2fc:	37 4b       	sbci	r19, 0xB7	; 183
 2fe:	c8 f3       	brcs	.-14     	; 0x2f2 <main+0x100>
				}

				PORTD &= ~(1 << GreenPedLight);
 300:	95 98       	cbi	0x12, 5	; 18
				PORTD |= (1 << RedPedLight);
 302:	94 9a       	sbi	0x12, 4	; 18
				TCNT1 = 0;
 304:	1d bc       	out	0x2d, r1	; 45
 306:	1c bc       	out	0x2c, r1	; 44
				
				do 
				{
				} while (TCNT1 < 3*15624);
 308:	2c b5       	in	r18, 0x2c	; 44
 30a:	3d b5       	in	r19, 0x2d	; 45
 30c:	28 31       	cpi	r18, 0x18	; 24
 30e:	37 4b       	sbci	r19, 0xB7	; 183
 310:	d8 f3       	brcs	.-10     	; 0x308 <main+0x116>
			}
			milliseconds = 0;
 312:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
 316:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__data_end+0x1>
 31a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end+0x2>
 31e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x3>
		}
		PORTB &= ~(1 << RedCarLight);
 322:	c0 98       	cbi	0x18, 0	; 24
		PORTD &= ~(1 << GreenPedLight);
 324:	95 98       	cbi	0x12, 5	; 18
		PORTB |= (1 << GreenCarLight);
 326:	c2 9a       	sbi	0x18, 2	; 24
		PORTD |= (1 << RedPedLight);
 328:	94 9a       	sbi	0x12, 4	; 18

		PreviousSwitchState = SwitchState;
 32a:	18 2f       	mov	r17, r24
    }
 32c:	ab cf       	rjmp	.-170    	; 0x284 <main+0x92>

0000032e <malloc>:
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	82 30       	cpi	r24, 0x02	; 2
 338:	91 05       	cpc	r25, r1
 33a:	10 f4       	brcc	.+4      	; 0x340 <malloc+0x12>
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <__flp>
 344:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <__flp+0x1>
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	a0 e0       	ldi	r26, 0x00	; 0
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	30 97       	sbiw	r30, 0x00	; 0
 352:	19 f1       	breq	.+70     	; 0x39a <malloc+0x6c>
 354:	40 81       	ld	r20, Z
 356:	51 81       	ldd	r21, Z+1	; 0x01
 358:	02 81       	ldd	r16, Z+2	; 0x02
 35a:	13 81       	ldd	r17, Z+3	; 0x03
 35c:	48 17       	cp	r20, r24
 35e:	59 07       	cpc	r21, r25
 360:	c8 f0       	brcs	.+50     	; 0x394 <malloc+0x66>
 362:	84 17       	cp	r24, r20
 364:	95 07       	cpc	r25, r21
 366:	69 f4       	brne	.+26     	; 0x382 <malloc+0x54>
 368:	10 97       	sbiw	r26, 0x00	; 0
 36a:	31 f0       	breq	.+12     	; 0x378 <malloc+0x4a>
 36c:	12 96       	adiw	r26, 0x02	; 2
 36e:	0c 93       	st	X, r16
 370:	12 97       	sbiw	r26, 0x02	; 2
 372:	13 96       	adiw	r26, 0x03	; 3
 374:	1c 93       	st	X, r17
 376:	27 c0       	rjmp	.+78     	; 0x3c6 <malloc+0x98>
 378:	00 93 73 00 	sts	0x0073, r16	; 0x800073 <__flp>
 37c:	10 93 74 00 	sts	0x0074, r17	; 0x800074 <__flp+0x1>
 380:	22 c0       	rjmp	.+68     	; 0x3c6 <malloc+0x98>
 382:	21 15       	cp	r18, r1
 384:	31 05       	cpc	r19, r1
 386:	19 f0       	breq	.+6      	; 0x38e <malloc+0x60>
 388:	42 17       	cp	r20, r18
 38a:	53 07       	cpc	r21, r19
 38c:	18 f4       	brcc	.+6      	; 0x394 <malloc+0x66>
 38e:	9a 01       	movw	r18, r20
 390:	bd 01       	movw	r22, r26
 392:	ef 01       	movw	r28, r30
 394:	df 01       	movw	r26, r30
 396:	f8 01       	movw	r30, r16
 398:	db cf       	rjmp	.-74     	; 0x350 <malloc+0x22>
 39a:	21 15       	cp	r18, r1
 39c:	31 05       	cpc	r19, r1
 39e:	f9 f0       	breq	.+62     	; 0x3de <malloc+0xb0>
 3a0:	28 1b       	sub	r18, r24
 3a2:	39 0b       	sbc	r19, r25
 3a4:	24 30       	cpi	r18, 0x04	; 4
 3a6:	31 05       	cpc	r19, r1
 3a8:	80 f4       	brcc	.+32     	; 0x3ca <malloc+0x9c>
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	9b 81       	ldd	r25, Y+3	; 0x03
 3ae:	61 15       	cp	r22, r1
 3b0:	71 05       	cpc	r23, r1
 3b2:	21 f0       	breq	.+8      	; 0x3bc <malloc+0x8e>
 3b4:	fb 01       	movw	r30, r22
 3b6:	93 83       	std	Z+3, r25	; 0x03
 3b8:	82 83       	std	Z+2, r24	; 0x02
 3ba:	04 c0       	rjmp	.+8      	; 0x3c4 <malloc+0x96>
 3bc:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__flp+0x1>
 3c0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__flp>
 3c4:	fe 01       	movw	r30, r28
 3c6:	32 96       	adiw	r30, 0x02	; 2
 3c8:	44 c0       	rjmp	.+136    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3ca:	fe 01       	movw	r30, r28
 3cc:	e2 0f       	add	r30, r18
 3ce:	f3 1f       	adc	r31, r19
 3d0:	81 93       	st	Z+, r24
 3d2:	91 93       	st	Z+, r25
 3d4:	22 50       	subi	r18, 0x02	; 2
 3d6:	31 09       	sbc	r19, r1
 3d8:	39 83       	std	Y+1, r19	; 0x01
 3da:	28 83       	st	Y, r18
 3dc:	3a c0       	rjmp	.+116    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3de:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <__brkval>
 3e2:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <__brkval+0x1>
 3e6:	23 2b       	or	r18, r19
 3e8:	41 f4       	brne	.+16     	; 0x3fa <malloc+0xcc>
 3ea:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 3ee:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 3f2:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <__brkval+0x1>
 3f6:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <__brkval>
 3fa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 3fe:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 402:	21 15       	cp	r18, r1
 404:	31 05       	cpc	r19, r1
 406:	41 f4       	brne	.+16     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 408:	2d b7       	in	r18, 0x3d	; 61
 40a:	3e b7       	in	r19, 0x3e	; 62
 40c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 410:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 414:	24 1b       	sub	r18, r20
 416:	35 0b       	sbc	r19, r21
 418:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__brkval>
 41c:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <__brkval+0x1>
 420:	e2 17       	cp	r30, r18
 422:	f3 07       	cpc	r31, r19
 424:	a0 f4       	brcc	.+40     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 426:	2e 1b       	sub	r18, r30
 428:	3f 0b       	sbc	r19, r31
 42a:	28 17       	cp	r18, r24
 42c:	39 07       	cpc	r19, r25
 42e:	78 f0       	brcs	.+30     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 430:	ac 01       	movw	r20, r24
 432:	4e 5f       	subi	r20, 0xFE	; 254
 434:	5f 4f       	sbci	r21, 0xFF	; 255
 436:	24 17       	cp	r18, r20
 438:	35 07       	cpc	r19, r21
 43a:	48 f0       	brcs	.+18     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 43c:	4e 0f       	add	r20, r30
 43e:	5f 1f       	adc	r21, r31
 440:	50 93 72 00 	sts	0x0072, r21	; 0x800072 <__brkval+0x1>
 444:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <__brkval>
 448:	81 93       	st	Z+, r24
 44a:	91 93       	st	Z+, r25
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	e0 e0       	ldi	r30, 0x00	; 0
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	cf 01       	movw	r24, r30
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <free>:
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	09 f4       	brne	.+2      	; 0x468 <free+0xa>
 466:	81 c0       	rjmp	.+258    	; 0x56a <free+0x10c>
 468:	fc 01       	movw	r30, r24
 46a:	32 97       	sbiw	r30, 0x02	; 2
 46c:	13 82       	std	Z+3, r1	; 0x03
 46e:	12 82       	std	Z+2, r1	; 0x02
 470:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <__flp>
 474:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <__flp+0x1>
 478:	10 97       	sbiw	r26, 0x00	; 0
 47a:	81 f4       	brne	.+32     	; 0x49c <free+0x3e>
 47c:	20 81       	ld	r18, Z
 47e:	31 81       	ldd	r19, Z+1	; 0x01
 480:	82 0f       	add	r24, r18
 482:	93 1f       	adc	r25, r19
 484:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <__brkval>
 488:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <__brkval+0x1>
 48c:	28 17       	cp	r18, r24
 48e:	39 07       	cpc	r19, r25
 490:	51 f5       	brne	.+84     	; 0x4e6 <free+0x88>
 492:	f0 93 72 00 	sts	0x0072, r31	; 0x800072 <__brkval+0x1>
 496:	e0 93 71 00 	sts	0x0071, r30	; 0x800071 <__brkval>
 49a:	67 c0       	rjmp	.+206    	; 0x56a <free+0x10c>
 49c:	ed 01       	movw	r28, r26
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	ce 17       	cp	r28, r30
 4a4:	df 07       	cpc	r29, r31
 4a6:	40 f4       	brcc	.+16     	; 0x4b8 <free+0x5a>
 4a8:	4a 81       	ldd	r20, Y+2	; 0x02
 4aa:	5b 81       	ldd	r21, Y+3	; 0x03
 4ac:	9e 01       	movw	r18, r28
 4ae:	41 15       	cp	r20, r1
 4b0:	51 05       	cpc	r21, r1
 4b2:	f1 f0       	breq	.+60     	; 0x4f0 <free+0x92>
 4b4:	ea 01       	movw	r28, r20
 4b6:	f5 cf       	rjmp	.-22     	; 0x4a2 <free+0x44>
 4b8:	d3 83       	std	Z+3, r29	; 0x03
 4ba:	c2 83       	std	Z+2, r28	; 0x02
 4bc:	40 81       	ld	r20, Z
 4be:	51 81       	ldd	r21, Z+1	; 0x01
 4c0:	84 0f       	add	r24, r20
 4c2:	95 1f       	adc	r25, r21
 4c4:	c8 17       	cp	r28, r24
 4c6:	d9 07       	cpc	r29, r25
 4c8:	59 f4       	brne	.+22     	; 0x4e0 <free+0x82>
 4ca:	88 81       	ld	r24, Y
 4cc:	99 81       	ldd	r25, Y+1	; 0x01
 4ce:	84 0f       	add	r24, r20
 4d0:	95 1f       	adc	r25, r21
 4d2:	02 96       	adiw	r24, 0x02	; 2
 4d4:	91 83       	std	Z+1, r25	; 0x01
 4d6:	80 83       	st	Z, r24
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	9b 81       	ldd	r25, Y+3	; 0x03
 4dc:	93 83       	std	Z+3, r25	; 0x03
 4de:	82 83       	std	Z+2, r24	; 0x02
 4e0:	21 15       	cp	r18, r1
 4e2:	31 05       	cpc	r19, r1
 4e4:	29 f4       	brne	.+10     	; 0x4f0 <free+0x92>
 4e6:	f0 93 74 00 	sts	0x0074, r31	; 0x800074 <__flp+0x1>
 4ea:	e0 93 73 00 	sts	0x0073, r30	; 0x800073 <__flp>
 4ee:	3d c0       	rjmp	.+122    	; 0x56a <free+0x10c>
 4f0:	e9 01       	movw	r28, r18
 4f2:	fb 83       	std	Y+3, r31	; 0x03
 4f4:	ea 83       	std	Y+2, r30	; 0x02
 4f6:	49 91       	ld	r20, Y+
 4f8:	59 91       	ld	r21, Y+
 4fa:	c4 0f       	add	r28, r20
 4fc:	d5 1f       	adc	r29, r21
 4fe:	ec 17       	cp	r30, r28
 500:	fd 07       	cpc	r31, r29
 502:	61 f4       	brne	.+24     	; 0x51c <free+0xbe>
 504:	80 81       	ld	r24, Z
 506:	91 81       	ldd	r25, Z+1	; 0x01
 508:	84 0f       	add	r24, r20
 50a:	95 1f       	adc	r25, r21
 50c:	02 96       	adiw	r24, 0x02	; 2
 50e:	e9 01       	movw	r28, r18
 510:	99 83       	std	Y+1, r25	; 0x01
 512:	88 83       	st	Y, r24
 514:	82 81       	ldd	r24, Z+2	; 0x02
 516:	93 81       	ldd	r25, Z+3	; 0x03
 518:	9b 83       	std	Y+3, r25	; 0x03
 51a:	8a 83       	std	Y+2, r24	; 0x02
 51c:	e0 e0       	ldi	r30, 0x00	; 0
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	12 96       	adiw	r26, 0x02	; 2
 522:	8d 91       	ld	r24, X+
 524:	9c 91       	ld	r25, X
 526:	13 97       	sbiw	r26, 0x03	; 3
 528:	00 97       	sbiw	r24, 0x00	; 0
 52a:	19 f0       	breq	.+6      	; 0x532 <free+0xd4>
 52c:	fd 01       	movw	r30, r26
 52e:	dc 01       	movw	r26, r24
 530:	f7 cf       	rjmp	.-18     	; 0x520 <free+0xc2>
 532:	8d 91       	ld	r24, X+
 534:	9c 91       	ld	r25, X
 536:	11 97       	sbiw	r26, 0x01	; 1
 538:	9d 01       	movw	r18, r26
 53a:	2e 5f       	subi	r18, 0xFE	; 254
 53c:	3f 4f       	sbci	r19, 0xFF	; 255
 53e:	82 0f       	add	r24, r18
 540:	93 1f       	adc	r25, r19
 542:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <__brkval>
 546:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <__brkval+0x1>
 54a:	28 17       	cp	r18, r24
 54c:	39 07       	cpc	r19, r25
 54e:	69 f4       	brne	.+26     	; 0x56a <free+0x10c>
 550:	30 97       	sbiw	r30, 0x00	; 0
 552:	29 f4       	brne	.+10     	; 0x55e <free+0x100>
 554:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__flp+0x1>
 558:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__flp>
 55c:	02 c0       	rjmp	.+4      	; 0x562 <free+0x104>
 55e:	13 82       	std	Z+3, r1	; 0x03
 560:	12 82       	std	Z+2, r1	; 0x02
 562:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <__brkval+0x1>
 566:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <__brkval>
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <_exit>:
 570:	f8 94       	cli

00000572 <__stop_program>:
 572:	ff cf       	rjmp	.-2      	; 0x572 <__stop_program>
