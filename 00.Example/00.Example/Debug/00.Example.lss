
00.Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b2  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000522  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000303  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008d  00000000  00000000  00001213  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_16>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_16>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <inttypes.h>

ISR(ADC_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	uint8_t LowValue = ADCL;
  7c:	84 b1       	in	r24, 0x04	; 4
	uint16_t AdcResult = ((ADCH << 8) | LowValue);
  7e:	25 b1       	in	r18, 0x05	; 5
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	92 2b       	or	r25, r18

	OCR1A = AdcResult;
  84:	9b bd       	out	0x2b, r25	; 43
  86:	8a bd       	out	0x2a, r24	; 42

	ADCSRA |= (1 << ADSC);
  88:	36 9a       	sbi	0x06, 6	; 6
}
  8a:	9f 91       	pop	r25
  8c:	8f 91       	pop	r24
  8e:	2f 91       	pop	r18
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <main>:

int main(void)
{
	DDRD |= (1 << DDD5);                                                                    //Set PIND5 (OC1A) as output
  9a:	8d 9a       	sbi	0x11, 5	; 17
	PORTD |= (1 << PORTD5);                                                                 //Clear PIND5
  9c:	95 9a       	sbi	0x12, 5	; 18

	//Configure ADC

	ADMUX |= (1 << REFS0);                                                                  //Set Reference Voltage to Vcc
  9e:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADIE);																	//Enable ADC Interrupt
  a0:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= (1 << ADPS2);																	//Enable a prescaler of 16
  a2:	32 9a       	sbi	0x06, 2	; 6
	ADCSRA |= (1 << ADEN);																	//Enable ADC mode of PORTA
  a4:	37 9a       	sbi	0x06, 7	; 6
	ADMUX |= (1 << MUX0);                                                                   //Set PINA1 as input
  a6:	38 9a       	sbi	0x07, 0	; 7
	sei();																					//Enable global Interrupts
  a8:	78 94       	sei
	ADCSRA |= (1 << ADSC);																	//Start first conversion
  aa:	36 9a       	sbi	0x06, 6	; 6

	//Configure Timer1 for 10-bit Fast PWM mode

	TCCR1A |= (1 << WGM10) | (1 << WGM11);													//Configure 10-bit Fast PWM mode
  ac:	8f b5       	in	r24, 0x2f	; 47
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12);																	//Enable remaining bits
  b2:	8e b5       	in	r24, 0x2e	; 46
  b4:	88 60       	ori	r24, 0x08	; 8
  b6:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS11);																	//Set a prescaler of 8
  b8:	8e b5       	in	r24, 0x2e	; 46
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1 << COM1A1);                                                                //Clear OC1A bit on Compare Match and set it on BOTTOM
  be:	8f b5       	in	r24, 0x2f	; 47
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	8f bd       	out	0x2f, r24	; 47
	OCR1A = 0;
  c4:	1b bc       	out	0x2b, r1	; 43
  c6:	1a bc       	out	0x2a, r1	; 42
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <main+0x2e>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
