
LED_Blink_with_Timer_in_CTC_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000579  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e6  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000310  00000000  00000000  00000dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
    DDRB |= (1 << DDB0);                               //Set PINB0 as output
  6c:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1 << PORTB0);                           //Set PINB0 to 0v
  6e:	c0 98       	cbi	0x18, 0	; 24
	TCCR1B |= (1 << WGM12);                            //Set Timer to CTC mode
  70:	8e b5       	in	r24, 0x2e	; 46
  72:	88 60       	ori	r24, 0x08	; 8
  74:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= ((1 << CS10) | (1 << CS11));             //Set Timer to 64 prescale
  76:	8e b5       	in	r24, 0x2e	; 46
  78:	83 60       	ori	r24, 0x03	; 3
  7a:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 15624;                                     //Set CTC compare value to 1Hz at 1MHz AVR Clock with prescale at 64
  7c:	88 e0       	ldi	r24, 0x08	; 8
  7e:	9d e3       	ldi	r25, 0x3D	; 61
  80:	9b bd       	out	0x2b, r25	; 43
  82:	8a bd       	out	0x2a, r24	; 42

    while (1) 
    {
		if (TIFR & (1 << OCF1A))                       //Check if OCF1A flag is set
		{ 
			PORTB ^= (1 << PORTB0);                    //Toggle the LED
  84:	91 e0       	ldi	r25, 0x01	; 1
	TCCR1B |= ((1 << CS10) | (1 << CS11));             //Set Timer to 64 prescale
	OCR1A = 15624;                                     //Set CTC compare value to 1Hz at 1MHz AVR Clock with prescale at 64

    while (1) 
    {
		if (TIFR & (1 << OCF1A))                       //Check if OCF1A flag is set
  86:	08 b6       	in	r0, 0x38	; 56
  88:	04 fe       	sbrs	r0, 4
  8a:	fd cf       	rjmp	.-6      	; 0x86 <main+0x1a>
		{ 
			PORTB ^= (1 << PORTB0);                    //Toggle the LED
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	89 27       	eor	r24, r25
  90:	88 bb       	out	0x18, r24	; 24

			TIFR |= (1 << OCF1A);                      //Clear OCF1A flag (by setting it)
  92:	88 b7       	in	r24, 0x38	; 56
  94:	80 61       	ori	r24, 0x10	; 16
  96:	88 bf       	out	0x38, r24	; 56
  98:	f6 cf       	rjmp	.-20     	; 0x86 <main+0x1a>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
