
08.LED_Blink_with_prescaled_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000092  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000579  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001da  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000312  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 47 00 	jmp	0x8e	; 0x8e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
    DDRB |= (1 << DDB0);                                                        //Set PINB0 as output
  6c:	b8 9a       	sbi	0x17, 0	; 23
	PORTB &= ~(1 << PORTB0);                                                    //Set PINB0 to 0V
  6e:	c0 98       	cbi	0x18, 0	; 24
	TCCR1B |= ((1 << CS10) | (1 << CS11));                                      //Set Timer to 64 prescaler
  70:	8e b5       	in	r24, 0x2e	; 46
  72:	83 60       	ori	r24, 0x03	; 3
  74:	8e bd       	out	0x2e, r24	; 46
	 
    while (1) 
    {
		if (TCNT1 >= 15624)
		{
			PORTB ^= (1 << PORTB0);                                             //Toggle PINB0
  76:	21 e0       	ldi	r18, 0x01	; 1
	PORTB &= ~(1 << PORTB0);                                                    //Set PINB0 to 0V
	TCCR1B |= ((1 << CS10) | (1 << CS11));                                      //Set Timer to 64 prescaler
	 
    while (1) 
    {
		if (TCNT1 >= 15624)
  78:	8c b5       	in	r24, 0x2c	; 44
  7a:	9d b5       	in	r25, 0x2d	; 45
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	9d 43       	sbci	r25, 0x3D	; 61
  80:	d8 f3       	brcs	.-10     	; 0x78 <main+0xc>
		{
			PORTB ^= (1 << PORTB0);                                             //Toggle PINB0
  82:	88 b3       	in	r24, 0x18	; 24
  84:	82 27       	eor	r24, r18
  86:	88 bb       	out	0x18, r24	; 24
			TCNT1 = 0;                                                          //Resetting counter
  88:	1d bc       	out	0x2d, r1	; 45
  8a:	1c bc       	out	0x2c, r1	; 44
  8c:	f5 cf       	rjmp	.-22     	; 0x78 <main+0xc>

0000008e <_exit>:
  8e:	f8 94       	cli

00000090 <__stop_program>:
  90:	ff cf       	rjmp	.-2      	; 0x90 <__stop_program>
